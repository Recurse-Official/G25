{
  "solvus/backend/app.py": {
    "path": "solvus/backend/app.py",
    "content": "from fastapi import FastAPI, File, UploadFile,Form\nfrom fastapi.middleware.cors import CORSMiddleware\nimport uvicorn\nimport requests\nfrom services.speechToText.speechToText import SpeechToText\nfrom services.summarize.summarize import Summarizer\nfrom typing import Dict\n\napp=FastAPI()\n\norigins = [\n    \"http://localhost:3000\",  # React app\n]\n\n# Add the CORS middleware to allow cross-origin requests\napp.add_middleware(\n    CORSMiddleware,\n    allow_origins=origins,  # List of allowed origins\n    allow_credentials=True,  # Allow credentials such as cookies\n    allow_methods=[\"*\"],  # Allow all methods (GET, POST, etc.)\n    allow_headers=[\"*\"],  # Allow all headers\n)\n\n\n@app.get(\"/\")\ndef home():\n    return {\"message\":\"Hello World\"}\n\n@app.post(\"/transcribe\")\ndef transcibe(user:str=Form(...),speech_diarization:str=Form(...), file: UploadFile = File(...)):\n    user=user\n    audio_data=file.file.read()\n    speech_diarization=True if speech_diarization==\"true\" else False\n    print(speech_diarization)\n    if(audio_data):\n        stt = SpeechToText(speech_diarization=speech_diarization)\n        conversation=stt.generate(audio_data)   \n        print(conversation)\n        return {\"user\":user,\"speech_diarization\":speech_diarization,\"conversation\":conversation}\n    else:\n        return {\"message\":\"No conversation found\"}\n\n\n@app.post(\"/summarise\")\ndef summarise(data:dict):\n    user=data[\"user\"]\n    conversation=data[\"conversation\"]\n    fast_output=True if data[\"fast_output\"]==\"true\" else False\n    print(fast_output)\n    if(conversation):\n        summarizer=Summarizer(fast_output=fast_output)\n        summary=summarizer.generate_summary(conversation)\n        print(summary)\n        return {\"user\":user,\"fast_output\":fast_output,\"summary\":summary}\n    else:\n        return {\"message\":\"No conversation found\"}\n\n\nif __name__ == \"__main__\":\n    uvicorn.run(app)\n",
    "size": 1865
  },
  "solvus/backend/spec-file.yml": {
    "path": "solvus/backend/spec-file.yml",
    "content": "name: solvus\nchannels:\n  - defaults\ndependencies:\n  - bzip2=1.0.8=h80987f9_6\n  - ca-certificates=2024.7.2=hca03da5_0\n  - expat=2.6.3=h313beb8_0\n  - libcxx=14.0.6=h848a8c0_0\n  - libffi=3.4.4=hca03da5_1\n  - ncurses=6.4=h313beb8_0\n  - openssl=3.0.15=h80987f9_0\n  - pip=24.2=py312hca03da5_0\n  - python=3.12.5=h99e199e_1\n  - readline=8.2=h1a28f6b_0\n  - setuptools=75.1.0=py312hca03da5_0\n  - sqlite=3.45.3=h80987f9_0\n  - tk=8.6.14=h6ba3021_0\n  - wheel=0.44.0=py312hca03da5_0\n  - xz=5.4.6=h80987f9_1\n  - zlib=1.2.13=h18a0788_1\n  - pip:\n      - aiohappyeyeballs==2.4.0\n      - aiohttp==3.10.5\n      - aiosignal==1.3.1\n      - annotated-types==0.7.0\n      - anyio==4.6.0\n      - attrs==24.2.0\n      - certifi==2024.8.30\n      - charset-normalizer==3.3.2\n      - click==8.1.7\n      - datasets==3.0.0\n      - dill==0.3.8\n      - fastapi==0.115.0\n      - filelock==3.16.1\n      - frozenlist==1.4.1\n      - fsspec==2024.6.1\n      - h11==0.14.0\n      - huggingface-hub==0.25.0\n      - idna==3.10\n      - multidict==6.1.0\n      - multiprocess==0.70.16\n      - numpy==2.1.1\n      - packaging==24.1\n      - pandas==2.2.3\n      - pyarrow==17.0.0\n      - pydantic==2.9.2\n      - pydantic-core==2.23.4\n      - python-dateutil==2.9.0.post0\n      - pytz==2024.2\n      - pyyaml==6.0.2\n      - regex==2024.9.11\n      - requests==2.32.3\n      - safetensors==0.4.5\n      - six==1.16.0\n      - sniffio==1.3.1\n      - starlette==0.38.6\n      - tokenizers==0.19.1\n      - tqdm==4.66.5\n      - transformers==4.44.2\n      - typing-extensions==4.12.2\n      - tzdata==2024.1\n      - urllib3==2.2.3\n      - uvicorn==0.30.6\n      - xxhash==3.5.0\n      - yarl==1.11.1\nprefix: /opt/miniconda3/envs/solvus\n",
    "size": 1668
  },
  "solvus/backend/services/utils.py": {
    "path": "solvus/backend/services/utils.py",
    "content": "",
    "size": 0
  },
  "solvus/backend/services/summarize/summarize.py": {
    "path": "solvus/backend/services/summarize/summarize.py",
    "content": "from ollama import generate\nimport numpy as np\nfrom transformers import pipeline\nimport torch\n\nclass Summarizer():\n    def __init__(self,fast_output=True):\n        self.fast_output=fast_output\n        if torch.cuda.is_available():\n            self.device = torch.device(\"cuda\")  # NVIDIA CUDA\n            print(\"Using GPU (CUDA):\", torch.cuda.get_device_name(0))\n        elif torch.backends.mps.is_available():\n            self.device = torch.device(\"mps\")  # Apple Metal (MPS)\n            print(\"Using GPU (MPS/Metal)\")\n        else:\n            self.device = torch.device(\"cpu\")  # Default to CPU\n            print(\"Using CPU\")\n        if(self.fast_output):\n            self.pipeline =pipeline(\n                \"summarization\",\n                model=\"philschmid/bart-large-cnn-samsum\",\n                device=self.device,\n            )\n\n    def generate_summary(self,conversation):\n        if(self.fast_output):\n            return self.pipeline(conversation)[0][\"summary_text\"]\n        else:\n            prompt = f\"\"\"\n            You are a transcriber and need to summarise a conversation between a doctor and a patient.Only give the summary and nothing else\n            {conversation} \n            \"\"\"\n\n            # Generate a summary of the conversation\n            summary = generate(model=\"mistral:latest\", prompt=prompt)\n            return summary[\"response\"]\n\nif __name__ == \"__main__\":\n    summarizer=Summarizer(fast_output=False)\n    conversation = \"\"\"\nSpeaker 1:Good morning.\nSpeaker 2:Good morning, Doctor.\nSpeaker 1:Hello.\nSpeaker 2:May I come in?\nSpeaker 1:You do look quite pale this morning.\nSpeaker 2:Yes, Doctor.\nSpeaker 1:Okay, let me check.\nSpeaker 2:I've not been feeling well for the past few days.\nSpeaker 1:Apply pressure on the stomach and check for pain. Does it hurt here?\nSpeaker 2:I've been having a stomach ache for a few days and feeling a bit dizzy since yesterday.\nSpeaker 1:While we were suffering from a stomach infection, that's the reason we were having a stomach ache and also getting busy. Did you change your diet recently or have something unhealthy?\nSpeaker 2:Yes, Doctor. The pain may as a sharpest.\nSpeaker 1:Okay, so you're probably suffering from food poisoning. Since the food stalls and fares are quite unhygienic, there's a high chance those uncovered food might have caused food poisoning.\nSpeaker 2:Actually, I went to a fair last week and ate food from the snail cell.\nSpeaker 1:That's good.\nSpeaker 2:I think I will never eat from any unhygienic place in the future.\nSpeaker 1:I'm prescribing some medicines, have them for one week and come back for a checkup next week, and please try to avoid spicy and fried foods for now.\nSpeaker 2:Okay doctor, thank you.\nSpeaker 1:Let's go!\n    \"\"\"\n    print(summarizer.generate_summary(conversation))\n",
    "size": 2795
  },
  "solvus/backend/services/speechToText/speechToText.py": {
    "path": "solvus/backend/services/speechToText/speechToText.py",
    "content": "from transformers import WhisperProcessor, WhisperForConditionalGeneration\nfrom pydub import AudioSegment\nfrom pyannote.audio import Pipeline\nfrom dotenv import load_dotenv\nimport os\nimport whisper\nimport numpy as np\nimport torch\nfrom io import BytesIO\n\nload_dotenv(\"/Users/rachitdas/Desktop/solvus_assignment/solvus/backend/.env.local\")\ntoken = os.getenv(\"HUGGING_FACE_TOKEN\")\n\nclass SpeechToText():\n    def __init__(self,speech_diarization=False):\n        self.model = whisper.load_model(\"small\")\n        # self.model.config.forced_decoder_ids = None\n        self.speech_diarization = speech_diarization\n        self.conversation=None\n        self.new_sampling_rate = 16000\n        if(speech_diarization):\n            self.pipeline = Pipeline.from_pretrained(\n                \"pyannote/speaker-diarization-3.1\",\n                use_auth_token=token,\n            )\n            self.speaker_transcriptions = {\n                \"SPEAKER_00\": [],\n                \"SPEAKER_01\": [],\n            }\n\n    def transcribe_audio(self, voice_data=None,audio_segment=None):\n        if(not self.speech_diarization):\n            audio = BytesIO(voice_data)\n            audio = AudioSegment.from_file(audio, format=\"wav\")\n            audio_segment = audio.set_frame_rate(self.new_sampling_rate)\n\n        # Convert pydub audio segment to raw data in NumPy format\n        samples = np.array(audio_segment.get_array_of_samples())\n\n        # Normalize audio to float32 format (expected by Whisper)\n        samples = samples.astype(np.float32) / np.iinfo(samples.dtype).max\n\n        # Ensure it's a mono audio (required by Whisper)\n        if audio_segment.channels > 1:\n            samples = samples.reshape((-1, audio_segment.channels)).mean(axis=1)\n        if(self.speech_diarization):\n\n            # Convert to a tensor and prepare for Whisper\n            audio_tensor = torch.from_numpy(samples).to(torch.float32)\n\n            # Use Whisper's helper to pad/trim and transcribe\n            if(self.speech_diarization):\n                audio_tensor = whisper.pad_or_trim(audio_tensor)\n            mel = whisper.log_mel_spectrogram(audio_tensor).to(self.model.device)\n\n            # Transcribe the preprocessed audio\n            options = whisper.DecodingOptions(\n                language=\"en\", fp16=False\n            )  # Customize options if needed\n            result = whisper.decode(self.model, mel, options)\n\n            # Extract text from the result\n            transcription = result.text\n            return transcription\n        else:\n            samples = samples.astype(np.float32)\n\n            # Transcribe the audio data using Whisper's built-in transcribe function\n            result = self.model.transcribe(samples)\n            return result[\"text\"]\n\n    def make_conversation(self):\n        speaker1_transcription_1 = self.speaker_transcriptions.get(\"SPEAKER_00\", [])\n        speaker2_transcription_2 = self.speaker_transcriptions.get(\"SPEAKER_01\", [])\n        conversation=\"\"\n        while speaker1_transcription_1 or speaker2_transcription_2:\n            if speaker1_transcription_1:\n                conversation +=\"Doctor:\" + speaker1_transcription_1.pop(0) + \"\\n\"\n            if speaker2_transcription_2:\n                conversation +=\"Patient:\" + speaker2_transcription_2.pop(0) + \"\\n\"\n        return conversation\n\n    def generate(self,voice_data):\n        if(self.speech_diarization):\n            audio = BytesIO(voice_data)\n            diarization = self.pipeline(audio)\n            audio=AudioSegment.from_file(audio,format=\"wav\")\n            audio = audio.set_frame_rate(self.new_sampling_rate)\n            for turn, _, speaker in diarization.itertracks(yield_label=True):\n                samples = audio[turn.start * 1000 : turn.end * 1000]\n\n                # Transcribe the audio segment using Whisper\n                transcription = self.transcribe_audio(audio_segment=samples)\n\n                # Store the transcriptions for different speakers\n                if speaker in self.speaker_transcriptions:\n                    self.speaker_transcriptions[speaker].append(transcription)\n                else:\n                    self.speaker_transcriptions[speaker].append(transcription)\n            self.conversation=self.make_conversation()\n        else:\n            self.conversation=self.transcribe_audio(voice_data=voice_data)\n        return self.conversation\n\n\n# if __name__ == \"__main__\":\n#     stt = SpeechToText(speech_diarization=True)\n#     with open(\"/Users/rachitdas/Desktop/solvus_assignment/Play.ht - Good Morning, doctor. May I come in?.wav\", \"rb\") as f:\n#         voice_data = f.read()\n#     print(stt.generate(voice_data))\n",
    "size": 4648
  },
  "solvus/public/favicon.ico": {
    "path": "solvus/public/favicon.ico",
    "content": "[Binary File]",
    "size": 3870
  },
  "solvus/public/index.html": {
    "path": "solvus/public/index.html",
    "content": "<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"utf-8\" />\n    <link rel=\"icon\" href=\"%PUBLIC_URL%/favicon.ico\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\" />\n    <meta name=\"theme-color\" content=\"#000000\" />\n    <meta\n      name=\"description\"\n      content=\"Web site created using create-react-app\"\n    />\n    <link rel=\"apple-touch-icon\" href=\"%PUBLIC_URL%/logo192.png\" />\n    <!--\n      manifest.json provides metadata used when your web app is installed on a\n      user's mobile device or desktop. See https://developers.google.com/web/fundamentals/web-app-manifest/\n    -->\n    <link rel=\"manifest\" href=\"%PUBLIC_URL%/manifest.json\" />\n    <!--\n      Notice the use of %PUBLIC_URL% in the tags above.\n      It will be replaced with the URL of the `public` folder during the build.\n      Only files inside the `public` folder can be referenced from the HTML.\n\n      Unlike \"/favicon.ico\" or \"favicon.ico\", \"%PUBLIC_URL%/favicon.ico\" will\n      work correctly both with client-side routing and a non-root public URL.\n      Learn how to configure a non-root public URL by running `npm run build`.\n    -->\n    <title>React App</title>\n  </head>\n  <body>\n    <noscript>You need to enable JavaScript to run this app.</noscript>\n    <div id=\"root\"></div>\n    <!--\n      This HTML file is a template.\n      If you open it directly in the browser, you will see an empty page.\n\n      You can add webfonts, meta tags, or analytics to this file.\n      The build step will place the bundled scripts into the <body> tag.\n\n      To begin the development, run `npm start` or `yarn start`.\n      To create a production bundle, use `npm run build` or `yarn build`.\n    -->\n  </body>\n</html>\n",
    "size": 1721
  },
  "solvus/public/manifest.json": {
    "path": "solvus/public/manifest.json",
    "content": "{\n  \"short_name\": \"React App\",\n  \"name\": \"Create React App Sample\",\n  \"icons\": [\n    {\n      \"src\": \"favicon.ico\",\n      \"sizes\": \"64x64 32x32 24x24 16x16\",\n      \"type\": \"image/x-icon\"\n    },\n    {\n      \"src\": \"logo192.png\",\n      \"type\": \"image/png\",\n      \"sizes\": \"192x192\"\n    },\n    {\n      \"src\": \"logo512.png\",\n      \"type\": \"image/png\",\n      \"sizes\": \"512x512\"\n    }\n  ],\n  \"start_url\": \".\",\n  \"display\": \"standalone\",\n  \"theme_color\": \"#000000\",\n  \"background_color\": \"#ffffff\"\n}\n",
    "size": 492
  },
  "solvus/public/robots.txt": {
    "path": "solvus/public/robots.txt",
    "content": "# https://www.robotstxt.org/robotstxt.html\nUser-agent: *\nDisallow:\n",
    "size": 67
  },
  "solvus/src/reportWebVitals.js": {
    "path": "solvus/src/reportWebVitals.js",
    "content": "const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n",
    "size": 362
  },
  "solvus/src/App.css": {
    "path": "solvus/src/App.css",
    "content": ".App {\n  text-align: center;\n}\n\n.App-logo {\n  height: 40vmin;\n  pointer-events: none;\n}\n\n@media (prefers-reduced-motion: no-preference) {\n  .App-logo {\n    animation: App-logo-spin infinite 20s linear;\n  }\n}\n\n.App-header {\n  background-color: #282c34;\n  min-height: 100vh;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n  font-size: calc(10px + 2vmin);\n  color: white;\n}\n\n.App-link {\n  color: #61dafb;\n}\n\n@keyframes App-logo-spin {\n  from {\n    transform: rotate(0deg);\n  }\n  to {\n    transform: rotate(360deg);\n  }\n}\n",
    "size": 564
  },
  "solvus/src/index.js": {
    "path": "solvus/src/index.js",
    "content": "import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n",
    "size": 535
  },
  "solvus/src/index.css": {
    "path": "solvus/src/index.css",
    "content": "body {\n  margin: 0;\n  font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', 'Roboto', 'Oxygen',\n    'Ubuntu', 'Cantarell', 'Fira Sans', 'Droid Sans', 'Helvetica Neue',\n    sans-serif;\n  -webkit-font-smoothing: antialiased;\n  -moz-osx-font-smoothing: grayscale;\n}\n\ncode {\n  font-family: source-code-pro, Menlo, Monaco, Consolas, 'Courier New',\n    monospace;\n}\n",
    "size": 366
  },
  "solvus/src/App.test.js": {
    "path": "solvus/src/App.test.js",
    "content": "import { render, screen } from '@testing-library/react';\nimport App from './App';\n\ntest('renders learn react link', () => {\n  render(<App />);\n  const linkElement = screen.getByText(/learn react/i);\n  expect(linkElement).toBeInTheDocument();\n});\n",
    "size": 246
  },
  "solvus/src/setupTests.js": {
    "path": "solvus/src/setupTests.js",
    "content": "// jest-dom adds custom jest matchers for asserting on DOM nodes.\n// allows you to do things like:\n// expect(element).toHaveTextContent(/react/i)\n// learn more: https://github.com/testing-library/jest-dom\nimport '@testing-library/jest-dom';\n",
    "size": 241
  },
  "solvus/src/logo.svg": {
    "path": "solvus/src/logo.svg",
    "content": "<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 841.9 595.3\"><g fill=\"#61DAFB\"><path d=\"M666.3 296.5c0-32.5-40.7-63.3-103.1-82.4 14.4-63.6 8-114.2-20.2-130.4-6.5-3.8-14.1-5.6-22.4-5.6v22.3c4.6 0 8.3.9 11.4 2.6 13.6 7.8 19.5 37.5 14.9 75.7-1.1 9.4-2.9 19.3-5.1 29.4-19.6-4.8-41-8.5-63.5-10.9-13.5-18.5-27.5-35.3-41.6-50 32.6-30.3 63.2-46.9 84-46.9V78c-27.5 0-63.5 19.6-99.9 53.6-36.4-33.8-72.4-53.2-99.9-53.2v22.3c20.7 0 51.4 16.5 84 46.6-14 14.7-28 31.4-41.3 49.9-22.6 2.4-44 6.1-63.6 11-2.3-10-4-19.7-5.2-29-4.7-38.2 1.1-67.9 14.6-75.8 3-1.8 6.9-2.6 11.5-2.6V78.5c-8.4 0-16 1.8-22.6 5.6-28.1 16.2-34.4 66.7-19.9 130.1-62.2 19.2-102.7 49.9-102.7 82.3 0 32.5 40.7 63.3 103.1 82.4-14.4 63.6-8 114.2 20.2 130.4 6.5 3.8 14.1 5.6 22.5 5.6 27.5 0 63.5-19.6 99.9-53.6 36.4 33.8 72.4 53.2 99.9 53.2 8.4 0 16-1.8 22.6-5.6 28.1-16.2 34.4-66.7 19.9-130.1 62-19.1 102.5-49.9 102.5-82.3zm-130.2-66.7c-3.7 12.9-8.3 26.2-13.5 39.5-4.1-8-8.4-16-13.1-24-4.6-8-9.5-15.8-14.4-23.4 14.2 2.1 27.9 4.7 41 7.9zm-45.8 106.5c-7.8 13.5-15.8 26.3-24.1 38.2-14.9 1.3-30 2-45.2 2-15.1 0-30.2-.7-45-1.9-8.3-11.9-16.4-24.6-24.2-38-7.6-13.1-14.5-26.4-20.8-39.8 6.2-13.4 13.2-26.8 20.7-39.9 7.8-13.5 15.8-26.3 24.1-38.2 14.9-1.3 30-2 45.2-2 15.1 0 30.2.7 45 1.9 8.3 11.9 16.4 24.6 24.2 38 7.6 13.1 14.5 26.4 20.8 39.8-6.3 13.4-13.2 26.8-20.7 39.9zm32.3-13c5.4 13.4 10 26.8 13.8 39.8-13.1 3.2-26.9 5.9-41.2 8 4.9-7.7 9.8-15.6 14.4-23.7 4.6-8 8.9-16.1 13-24.1zM421.2 430c-9.3-9.6-18.6-20.3-27.8-32 9 .4 18.2.7 27.5.7 9.4 0 18.7-.2 27.8-.7-9 11.7-18.3 22.4-27.5 32zm-74.4-58.9c-14.2-2.1-27.9-4.7-41-7.9 3.7-12.9 8.3-26.2 13.5-39.5 4.1 8 8.4 16 13.1 24 4.7 8 9.5 15.8 14.4 23.4zM420.7 163c9.3 9.6 18.6 20.3 27.8 32-9-.4-18.2-.7-27.5-.7-9.4 0-18.7.2-27.8.7 9-11.7 18.3-22.4 27.5-32zm-74 58.9c-4.9 7.7-9.8 15.6-14.4 23.7-4.6 8-8.9 16-13 24-5.4-13.4-10-26.8-13.8-39.8 13.1-3.1 26.9-5.8 41.2-7.9zm-90.5 125.2c-35.4-15.1-58.3-34.9-58.3-50.6 0-15.7 22.9-35.6 58.3-50.6 8.6-3.7 18-7 27.7-10.1 5.7 19.6 13.2 40 22.5 60.9-9.2 20.8-16.6 41.1-22.2 60.6-9.9-3.1-19.3-6.5-28-10.2zM310 490c-13.6-7.8-19.5-37.5-14.9-75.7 1.1-9.4 2.9-19.3 5.1-29.4 19.6 4.8 41 8.5 63.5 10.9 13.5 18.5 27.5 35.3 41.6 50-32.6 30.3-63.2 46.9-84 46.9-4.5-.1-8.3-1-11.3-2.7zm237.2-76.2c4.7 38.2-1.1 67.9-14.6 75.8-3 1.8-6.9 2.6-11.5 2.6-20.7 0-51.4-16.5-84-46.6 14-14.7 28-31.4 41.3-49.9 22.6-2.4 44-6.1 63.6-11 2.3 10.1 4.1 19.8 5.2 29.1zm38.5-66.7c-8.6 3.7-18 7-27.7 10.1-5.7-19.6-13.2-40-22.5-60.9 9.2-20.8 16.6-41.1 22.2-60.6 9.9 3.1 19.3 6.5 28.1 10.2 35.4 15.1 58.3 34.9 58.3 50.6-.1 15.7-23 35.6-58.4 50.6zM320.8 78.4z\"/><circle cx=\"420.9\" cy=\"296.5\" r=\"45.7\"/><path d=\"M520.5 78.1z\"/></g></svg>",
    "size": 2632
  },
  "solvus/src/App.js": {
    "path": "solvus/src/App.js",
    "content": "import React, { useState, useEffect } from 'react';\nimport { initializeApp } from 'firebase/app';\nimport { getAuth, onAuthStateChanged, signInWithEmailAndPassword, signOut } from 'firebase/auth';\nimport LoginPage from './components/LoginPage';\nimport RegistrationPage from './components/RegistrationPage';\nimport HomePage from './components/HomePage';\n\n// Your Firebase configuration\nconst firebaseConfig = {\n  apiKey: process.env.REACT_APP_API_KEY,\n  authDomain: process.env.REACT_APP_AUTH_DOMAIN,\n  projectId: process.env.REACT_APP_PROJECT_ID,\n  storageBucket: process.env.REACT_APP_STORAGE_BUCKET,\n  messagingSenderId: process.env.REACT_APP_MESSAGING_SENDER_ID,\n  appId: process.env.REACT_APP_APP_ID,\n};\n// Initialize Firebase\nconst app = initializeApp(firebaseConfig);\nexport const auth = getAuth(app);\n\nconst App = () => {\n  const [isLoggedIn, setIsLoggedIn] = useState(false);\n  const [user, setUser] = useState(null);\n  const [showRegistration, setShowRegistration] = useState(false);\n\n  useEffect(() => {\n    const unsubscribe = onAuthStateChanged(auth, (user) => {\n      if (user) {\n        setIsLoggedIn(true);\n        setUser(user);\n      } else {\n        setIsLoggedIn(false);\n        setUser(null);\n      }\n    });\n\n    return () => unsubscribe();\n  }, []);\n\n  const handleLogin = async (email, password) => {\n    try {\n      await signInWithEmailAndPassword(auth, email, password);\n    } catch (error) {\n      console.error('Error logging in:', error.message);\n      // Handle login error (e.g., show error message to user)\n    }\n  };\n\n  const handleLogout = async () => {\n    try {\n      await signOut(auth);\n    } catch (error) {\n      console.error('Error logging out:', error.message);\n      // Handle logout error\n    }\n  };\n\n  const handleRegistrationSuccess = (user) => {\n    setIsLoggedIn(true);\n    setUser(user);\n    setShowRegistration(false);\n  };\n\n  if (isLoggedIn) {\n    return <HomePage onLogout={handleLogout} user={user} />;\n  }\n\n  if (showRegistration) {\n    return (\n      <RegistrationPage \n        onRegistrationSuccess={handleRegistrationSuccess}\n        onBackToLogin={() => setShowRegistration(false)}\n      />\n    );\n  }\n\n  return (\n    <LoginPage \n      onLogin={handleLogin} \n      onRegisterClick={() => setShowRegistration(true)}\n    />\n  );\n};\n\nexport default App;\n",
    "size": 2309
  },
  "solvus/src/components/LoginPage.js": {
    "path": "solvus/src/components/LoginPage.js",
    "content": "import React, { useState } from 'react';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport Button from 'react-bootstrap/Button';\nimport './LoginPage.css';\n\nconst LoginPage = ({ onLogin, onRegisterClick }) => {\n  const [email, setEmail] = useState('');\n  const [password, setPassword] = useState('');\n\n  const handleLogin = (e) => {\n    e.preventDefault();\n    onLogin(email, password);\n  };\n\n  return (\n    <div className=\"login-page\">\n      <header className=\"header\">\n        <h1 className=\"logo\">Mediscribe</h1>\n      </header>\n      <main className=\"main-content\">\n        <div className=\"login-card\">\n          <h2 className=\"login-title\">Login</h2>\n          <form onSubmit={handleLogin} className=\"login-form\">\n            <div className=\"form-group\">\n              <label htmlFor=\"email\">Email</label>\n              <input\n                id=\"email\"\n                type=\"email\"\n                value={email}\n                onChange={(e) => setEmail(e.target.value)}\n                required\n              />\n            </div>\n            <div className=\"form-group\">\n              <label htmlFor=\"password\">Password</label>\n              <input\n                id=\"password\"\n                type=\"password\"\n                value={password}\n                onChange={(e) => setPassword(e.target.value)}\n                required\n              />\n            </div>\n            <Button type=\"submit\" className=\"login-button\">\n              Login\n            </Button>\n          </form>\n          <Button onClick={onRegisterClick} className=\"register-button mt-3\">\n            Register New Account\n          </Button>\n        </div>\n      </main>\n    </div>\n  );\n};\n\nexport default LoginPage;",
    "size": 1703
  },
  "solvus/src/components/RegistrationPage.css": {
    "path": "solvus/src/components/RegistrationPage.css",
    "content": "/* Base Styles */\n.registration-page {\n  min-height: 100vh;\n  display: flex;\n  flex-direction: column;\n  background-color: #1a202c;\n  color: white;\n}\n\n.header {\n  background-color: #2d3748;\n  padding: 1rem 1.5rem;\n  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);\n}\n\n.logo {\n  font-size: 1.875rem;\n  font-weight: bold;\n  color: #63b3ed;\n}\n\n.main-content {\n  flex-grow: 1;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n}\n\n.registration-card {\n  background-color: #2d3748;\n  padding: 2rem;\n  border-radius: 0.5rem;\n  width: 100%;\n  max-width: 24rem;\n}\n\n.registration-title {\n  font-size: 1.5rem;\n  font-weight: bold;\n  text-align: center;\n  margin-bottom: 1.5rem;\n}\n\n.registration-form {\n  display: flex;\n  flex-direction: column;\n  gap: 1rem;\n}\n\n.form-group {\n  display: flex;\n  flex-direction: column;\n  gap: 0.5rem;\n}\n\n.form-group label {\n  font-weight: bold;\n}\n\n.form-group input {\n  padding: 0.5rem;\n  border-radius: 0.25rem;\n  border: 1px solid #4a5568;\n  background-color: #4a5568;\n  color: white;\n}\n\n.register-button {\n  padding: 0.5rem 1rem;\n  border-radius: 0.25rem;\n  border: none;\n  cursor: pointer;\n  font-weight: bold;\n  background-color: #3182ce;\n  color: white;\n  transition: background-color 0.3s ease;\n}\n\n.register-button:hover {\n  background-color: #2c5282;\n}\n\n.back-to-login-button {\n  padding: 0.5rem 1rem;\n  border-radius: 0.25rem;\n  border: none;\n  cursor: pointer;\n  font-weight: bold;\n  background-color: #63b3ed;\n  color: white;\n  transition: background-color 0.3s ease;\n}\n\n.back-to-login-button:hover {\n  background-color: #4299e1;\n}\n\n.error-message {\n  color: #f56565;\n  font-weight: bold;\n  text-align: center;\n  margin-bottom: 1rem;\n}\n\n.register-button,\n.back-to-login-button {\n  padding: 0.5rem 1rem; /* Consistent padding */\n  border-radius: 0.25rem;\n  border: none;\n  cursor: pointer;\n  font-weight: bold;\n  background-color: #3182ce;\n  color: white;\n  transition: background-color 0.3s ease;\n  width: 100%; /* Make buttons take full width of the container */\n  max-width: 100%; /* Ensure they stay within the container */\n  text-align: center; /* Center text within the buttons */\n}",
    "size": 2129
  },
  "solvus/src/components/LoginPage.css": {
    "path": "solvus/src/components/LoginPage.css",
    "content": ".login-page {\n  min-height: 100vh;\n  display: flex;\n  flex-direction: column;\n  background-color: #1a202c;\n  color: white;\n}\n\n.header {\n  background-color: #2d3748;\n  padding: 1rem 1.5rem;\n  box-shadow: 0 2px 4px rgba(0,0,0,0.1);\n}\n\n.logo {\n  font-size: 1.875rem;\n  font-weight: bold;\n  color: #63b3ed;\n}\n\n.main-content {\n  flex-grow: 1;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n}\n\n.login-card {\n  background-color: #2d3748;\n  padding: 2rem;\n  border-radius: 0.5rem;\n  width: 100%;\n  max-width: 24rem;\n}\n\n.login-title {\n  font-size: 1.5rem;\n  font-weight: bold;\n  text-align: center;\n  margin-bottom: 1.5rem;\n}\n\n.login-form {\n  display: flex;\n  flex-direction: column;\n  gap: 1rem;\n}\n\n.form-group {\n  display: flex;\n  flex-direction: column;\n  gap: 0.5rem;\n}\n\n.form-group label {\n  font-weight: bold;\n}\n\n.form-group input {\n  padding: 0.5rem;\n  border-radius: 0.25rem;\n  border: 1px solid #4a5568;\n  background-color: #4a5568;\n  color: white;\n}\n\n.login-button, .oauth-button {\n  padding: 0.5rem 1rem;\n  border-radius: 0.25rem;\n  border: none;\n  cursor: pointer;\n  font-weight: bold;\n  transition: background-color 0.3s ease;\n}\n\n.login-button {\n  background-color: #3182ce;\n  color: white;\n}\n\n.login-button:hover {\n  background-color: #2c5282;\n}\n\n.oauth-button {\n  background-color: #3182ce;\n  color: white;\n  margin-top: 1rem;\n}\n\n.oauth-button:hover {\n  background-color: #2c5282;\n}",
    "size": 1408
  },
  "solvus/src/components/HomePage.css": {
    "path": "solvus/src/components/HomePage.css",
    "content": "/* Base Styles */\n.home-page {\n  min-height: 100vh;\n  display: flex;\n  flex-direction: column;\n  background-color: #1a202c;\n  color: white;\n}\n\n.header {\n  background-color: #2d3748;\n  padding: 1rem 1.5rem;\n  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n}\n\n.logo {\n  font-size: 1.875rem;\n  font-weight: bold;\n  color: #63b3ed;\n}\n\n.logout-button {\n  padding: 0.5rem 1rem;\n  border-radius: 0.25rem;\n  background-color: #3182ce;\n  color: white;\n  border: none;\n  cursor: pointer;\n  transition: background-color 0.3s ease;\n}\n\n.logout-button:hover {\n  background-color: #2c5282;\n}\n\n.main-content {\n  flex-grow: 1;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  padding: 2rem;\n}\n\n.container {\n  background-color: #2d3748;\n  padding: 2rem;\n  border-radius: 0.5rem;\n}\n\n.record-upload-section, .transcription-section {\n  text-align: center;\n}\n\n.record-button {\n  padding: 0.5rem 2rem;\n  border-radius: 0.25rem;\n  background-color: #3182ce;\n  color: white;\n  border: none;\n  cursor: pointer;\n  transition: background-color 0.3s ease;\n}\n\n.record-button:hover {\n  background-color: #2c5282;\n}\n\n.record-button.recording {\n  background-color: #e53e3e; /* Red color for recording state */\n  animation: pulse 1s infinite; /* Animation for recording */\n}\n\n.upload-input {\n  margin-top: 1rem;\n  padding: 0.5rem;\n  border-radius: 0.25rem;\n  border: none;\n  background-color: #4a5568; /* Match background */\n  color: white;\n}\n\n.upload-input::file-selector-button {\n  background-color: #4a5568; /* Match background */\n  border: none;\n  padding: 0.5rem 1rem;\n  border-radius: 0.25rem;\n  color: white;\n}\n\n.transcribe-button {\n  padding: 0.5rem 2rem;\n  border-radius: 0.25rem;\n  background-color: #3182ce;\n  color: white;\n  border: none;\n  cursor: pointer;\n  transition: background-color 0.3s ease;\n}\n\n.transcribe-button:hover {\n  background-color: #2c5282;\n}\n\n.transcribe-options {\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  margin-top: 1rem;\n}\n\n.form-check {\n  margin-bottom: 0.75rem;\n}\n\n/* Other styles remain unchanged */\n\n/* Transcription Text Box Styles */\n.transcription-box {\n  width: 100%;\n  background-color: #1a202c; /* Match background color */\n  border: 1px solid #4a5568;\n  color: white; /* Text color */\n  resize: none; /* Prevent manual resizing */\n  overflow-y: auto; /* Enable scrolling */\n  transition: background-color 0.3s ease; /* Smooth transition */\n  padding: 0.5rem; /* Add padding for better appearance */\n}\n\n/* Focus style to keep background color consistent */\n.transcription-box:focus {\n  outline: none; /* Remove the default outline */\n  background-color: #1a202c; /* Keep the same background color */\n  border: 1px solid #63b3ed; /* Optional: change border color on focus */\n}\n\n/* Cursor style to ensure visibility */\n.transcription-box {\n  caret-color: #63b3ed; /* Change the caret color to match your theme */\n}\n\n\n\n@keyframes pulse {\n  0% {\n    transform: scale(1);\n  }\n  50% {\n    transform: scale(1.05);\n  }\n  100% {\n    transform: scale(1);\n  }\n}\n",
    "size": 3077
  },
  "solvus/src/components/HomePage.js": {
    "path": "solvus/src/components/HomePage.js",
    "content": "import React, { useState, useRef } from 'react';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport Button from 'react-bootstrap/Button';\nimport './HomePage.css';\n\nconst HomePage = ({ onLogout }) => {\n  const [transcription, setTranscription] = useState('');\n  const [isRecording, setIsRecording] = useState(false);\n  const [memoryOption, setMemoryOption] = useState(false);\n  const [diarizationOption, setDiarizationOption] = useState(false);\n  const [file, setFile] = useState(null);\n  const [recordedAudio, setRecordedAudio] = useState(null);\n  const [isTranscribing, setIsTranscribing] = useState(false);\n  const [isSummarizing, setIsSummarizing] = useState(false);\n  const mediaRecorderRef = useRef(null);\n  const audioChunksRef = useRef([]);\n\n  // Function to handle audio recording\n  const handleAudioRecord = async () => {\n    if (isRecording) {\n      mediaRecorderRef.current.stop();\n      setIsRecording(false);\n    } else {\n      const stream = await navigator.mediaDevices.getUserMedia({ audio: true });\n      mediaRecorderRef.current = new MediaRecorder(stream);\n\n      mediaRecorderRef.current.ondataavailable = (event) => {\n        audioChunksRef.current.push(event.data);\n      };\n\n      mediaRecorderRef.current.onstop = async () => {\n        const audioBlob = new Blob(audioChunksRef.current, { type: 'audio/webm' });\n        const wavBlob = await convertBlobToWav(audioBlob);\n        audioChunksRef.current = [];\n        setRecordedAudio(URL.createObjectURL(wavBlob)); // Set URL for playback\n        setFile(wavBlob); // Set the recorded file for uploading\n      };\n\n      mediaRecorderRef.current.start();\n      setIsRecording(true);\n    }\n  };\n\n  const convertBlobToWav = async (audioBlob) => {\n    const audioContext = new (window.AudioContext || window.webkitAudioContext)();\n    const arrayBuffer = await audioBlob.arrayBuffer();\n    const audioBuffer = await audioContext.decodeAudioData(arrayBuffer);\n\n    const numChannels = audioBuffer.numberOfChannels;\n    const sampleRate = audioBuffer.sampleRate;\n    const byteLength = audioBuffer.length * numChannels * 2 + 44; // 44 bytes for WAV header\n    const wavBuffer = new ArrayBuffer(byteLength);\n    const view = new DataView(wavBuffer);\n\n    // Write WAV header\n    writeString(view, 0, 'RIFF');\n    view.setUint32(4, byteLength - 8, true);\n    writeString(view, 8, 'WAVE');\n    writeString(view, 12, 'fmt ');\n    view.setUint32(16, 16, true); // PCM chunk size\n    view.setUint16(20, 1, true); // Audio format (PCM)\n    view.setUint16(22, numChannels, true); // Number of channels\n    view.setUint32(24, sampleRate, true); // Sample rate\n    view.setUint32(28, sampleRate * numChannels * 2, true); // Byte rate\n    view.setUint16(32, numChannels * 2, true); // Block align\n    view.setUint16(34, 16, true); // Bits per sample\n    writeString(view, 36, 'data');\n    view.setUint32(40, byteLength - 44, true); // Data chunk size\n\n    // Write PCM samples\n    let offset = 44; // Start after header\n    for (let channel = 0; channel < numChannels; channel++) {\n      const channelData = audioBuffer.getChannelData(channel);\n      for (let i = 0; i < channelData.length; i++) {\n        view.setInt16(offset, channelData[i] * 32767, true); // Convert float to PCM\n        offset += 2;\n      }\n    }\n\n    return new Blob([wavBuffer], { type: 'audio/wav' });\n  };\n\n  const writeString = (view, offset, string) => {\n    for (let i = 0; i < string.length; i++) {\n      view.setUint8(offset + i, string.charCodeAt(i));\n    }\n  };\n\n  // Function to handle file upload\n  const handleFileUpload = (e) => {\n    const uploadedFile = e.target.files[0];\n    if (uploadedFile.name.endsWith('.wav')) {\n      setFile(uploadedFile);\n      setRecordedAudio(URL.createObjectURL(uploadedFile));\n    } else {\n      console.log('Please upload a valid WAV file.');\n    }\n  };\n\n  // Remove the uploaded or recorded file\n  const handleRemoveFile = () => {\n    setFile(null);\n    setRecordedAudio(null);\n  };\n\n  // Function to handle transcription and summarization\n  const handleTranscribe = async () => {\n    if (!file) {\n      alert(\"Please upload or record an audio file.\");\n      return;\n    }\n\n    setIsTranscribing(true);\n\n    const formData = new FormData();\n    formData.append('file', file);\n    formData.append('user', 'test_user');\n    formData.append('speech_diarization', diarizationOption.toString());\n\n    try {\n      const transcribeResponse = await fetch('http://127.0.0.1:8000/transcribe', {\n        method: 'POST',\n        body: formData,\n      });\n      const transcribeData = await transcribeResponse.json();\n\n      setIsTranscribing(false);\n\n      if (transcribeData.conversation) {\n        setIsSummarizing(true);\n\n        const summaryData = {\n          user: 'test_user',\n          conversation: transcribeData.conversation,\n          fast_output: memoryOption.toString(),\n        };\n\n        const summariseResponse = await fetch('http://127.0.0.1:8000/summarise', {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json',\n          },\n          body: JSON.stringify(summaryData),\n        });\n\n        const summariseData = await summariseResponse.json();\n        setTranscription(summariseData.summary);\n      } else {\n        alert('No conversation found in the audio.');\n      }\n    } catch (error) {\n      console.error('Error in transcription:', error);\n    } finally {\n      setIsTranscribing(false);\n      setIsSummarizing(false);\n    }\n  };\n\n  // Handle memory option change\n  const handleMemoryOptionChange = (e) => {\n    setMemoryOption(e.target.checked);\n  };\n\n  // Handle diarization option change\n  const handleDiarizationOptionChange = (e) => {\n    setDiarizationOption(e.target.checked);\n  };\n\n  // Handle focus event to change text color to black\n  const handleTextFocus = (e) => {\n    e.target.style.color = 'white';\n  };\n\n  return (\n    <div className=\"home-page\">\n      <header className=\"header\">\n        <h1 className=\"logo\">Mediscribe</h1>\n        <Button onClick={onLogout} className=\"logout-button\">\n          Logout\n        </Button>\n      </header>\n      <main className=\"main-content\">\n        <div className=\"container\">\n          <div className=\"row\">\n            {/* Left Column: Record Audio and Upload WAV */}\n            <div className=\"col-md-4 record-upload-section\">\n              <h3>Record Audio</h3>\n              <Button\n                onClick={handleAudioRecord}\n                className={`record-button mb-3 ${isRecording ? 'recording' : ''}`}\n              >\n                {isRecording ? 'Stop Recording' : 'Start Recording'}\n              </Button>\n\n              {recordedAudio && (\n                <div>\n                  <h5>Recorded Audio:</h5>\n                  <audio controls src={recordedAudio} />\n                </div>\n              )}\n\n              <h3>OR</h3>\n              <h3 className=\"mt-4\">Upload WAV File</h3>\n              <input\n                type=\"file\"\n                accept=\".wav\"\n                onChange={handleFileUpload}\n                className=\"upload-input\"\n              />\n\n              {file && (\n                <div className=\"mt-3\">\n                  <p><strong>Uploaded File:</strong> {file.name || 'Recorded Audio'}</p>\n                  <Button variant=\"danger\" onClick={handleRemoveFile}>\n                    Remove File\n                  </Button>\n                </div>\n              )}\n            </div>\n\n            {/* Middle Column: Transcribe Button */}\n            <div className=\"col-md-4 d-flex flex-column align-items-center justify-content-center\">\n              <Button onClick={handleTranscribe} className=\"transcribe-button mb-4\" disabled={isTranscribing || isSummarizing}>\n                {isTranscribing ? 'Transcribing...' : isSummarizing ? 'Summarizing...' : 'Transcribe and Summarize'}\n              </Button>\n\n              {/* Radio Buttons for Options */}\n              <div className=\"transcribe-options\">\n                <div className=\"form-check\">\n                  <input\n                    className=\"form-check-input\"\n                    type=\"checkbox\"\n                    id=\"lessMemory\"\n                    onChange={handleMemoryOptionChange}\n                  />\n                  <label className=\"form-check-label\" htmlFor=\"lessMemory\">\n                    User smaller model\n                  </label>\n                </div>\n\n                <div className=\"form-check\">\n                  <input\n                    className=\"form-check-input\"\n                    type=\"checkbox\"\n                    id=\"diarization\"\n                    onChange={handleDiarizationOptionChange}\n                  />\n                  <label className=\"form-check-label\" htmlFor=\"diarization\">\n                    Speech Diarization\n                  </label>\n                </div>\n              </div>\n            </div>\n\n            {/* Right Column: Transcription Result */}\n            <div className=\"col-md-4 transcription-result\">\n              <h3>Transcription Result</h3>\n              <div\n                className=\"transcription-box\"\n                onFocus={handleTextFocus}\n                contentEditable={true}\n                dangerouslySetInnerHTML={{ __html: transcription }}\n                style={{ minHeight: '200px', border: '1px solid #ccc', padding: '10px' }}\n              />\n            </div>\n          </div>\n        </div>\n      </main>\n    </div>\n  );\n};\n\nexport default HomePage;\n",
    "size": 9449
  },
  "solvus/src/components/RegistrationPage.js": {
    "path": "solvus/src/components/RegistrationPage.js",
    "content": "import React, { useState } from 'react';\nimport { createUserWithEmailAndPassword } from 'firebase/auth';\nimport { auth } from '../App'; \nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport Button from 'react-bootstrap/Button';\nimport './RegistrationPage.css'; \n\nconst RegistrationPage = ({ onRegistrationSuccess, onBackToLogin }) => {\n  const [email, setEmail] = useState('');\n  const [password, setPassword] = useState('');\n  const [confirmPassword, setConfirmPassword] = useState('');\n  const [error, setError] = useState('');\n\n  const handleRegister = async (e) => {\n    e.preventDefault();\n    setError('');\n\n    if (password !== confirmPassword) {\n      setError(\"Passwords don't match\");\n      return;\n    }\n\n    try {\n      const userCredential = await createUserWithEmailAndPassword(auth, email, password);\n      const user = userCredential.user;\n      console.log('User registered:', user);\n      onRegistrationSuccess(user);\n    } catch (error) {\n      setError(error.message);\n    }\n  };\n\n  return (\n    <div className=\"registration-page\">\n      <header className=\"header\">\n        <h1 className=\"logo\">Mediscribe</h1>\n      </header>\n      <main className=\"main-content\">\n        <div className=\"registration-card\">\n          <h2 className=\"registration-title\">Register</h2>\n          {error && <p className=\"error-message\">{error}</p>}\n          <form onSubmit={handleRegister} className=\"registration-form\">\n            <div className=\"form-group\">\n              <label htmlFor=\"email\">Email</label>\n              <input\n                id=\"email\"\n                type=\"email\"\n                value={email}\n                onChange={(e) => setEmail(e.target.value)}\n                required\n              />\n            </div>\n            <div className=\"form-group\">\n              <label htmlFor=\"password\">Password</label>\n              <input\n                id=\"password\"\n                type=\"password\"\n                value={password}\n                onChange={(e) => setPassword(e.target.value)}\n                required\n              />\n            </div>\n            <div className=\"form-group\">\n              <label htmlFor=\"confirmPassword\">Confirm Password</label>\n              <input\n                id=\"confirmPassword\"\n                type=\"password\"\n                value={confirmPassword}\n                onChange={(e) => setConfirmPassword(e.target.value)}\n                required\n              />\n            </div>\n            <Button type=\"submit\" className=\"register-button\">\n              Register\n            </Button>\n          </form>\n          <Button onClick={onBackToLogin} className=\"back-to-login-button mt-3\">\n            Back to Login\n          </Button>\n        </div>\n      </main>\n    </div>\n  );\n};\n\nexport default RegistrationPage;",
    "size": 2787
  }
}